※この内容はC++20より有効なものです。現行（C++17）ではまだ1ミリも利用可能な情報ではありません。また、随時記述が変更される可能性があります。

[:contents]

**Spaceship Operator（宇宙船演算子）とは
C++20より追加される新しい二項演算子で、比較演算子の一つです。
ある値a,bでa&lt;=&gt;bとすると、a&lt;b、a&gt;b、a==bをそれぞれ0<、<0、0として一括判定します。
コードで書くと
>|cpp|
#include <compare>//←必須！

int a{}, b{};

std::cin >> a;
std::cin >> b;

auto comp = a <=> b;

if (comp < 0) {
   std::cout << "a < b";
} else if (0 < comp) {
   std::cout << "a > b";
} else if (comp == 0) {
   std::cout << "a = b";
}
||<
[https://wandbox.org/permlink/HlFAIYIGISgmu0TP:title]
この様に書けます。
以下この記事では宇宙船演算子と呼びますが、Consistent comparison（一貫比較）、Three-way comparison（三方比較）などとも呼ばれています。

C++で自前クラスに比較演算子を実装したことがあればその面倒さをご存じで、そこに新しくよく分からない一つが加わったとなれば、面倒なだけでいいことなどないと思われるでしょう。
しかし、そんなあなたにも朗報です。なんと、クラスに対して宇宙船演算子を定義しておくと、最大で6つの比較演算子が自動生成されます。

>|cpp|
class C {
   int x;
   int y;
   double v;
   std::string str;
public:
   auto operator<=>(const C&) const = default;
   //外部定義でもok
   //friend std::strong_equality operator<=>(const C&, const C&);
   //もしくは
   //friend auto operator<=>(const C&, const C&) = default;
};
||<
このクラスCは6つの比較演算子（a&lt;b、a&gt;b、a&lt;=b、a&gt;=b、a==b、a!=b）を用いて比較を行うことが出来ます。
もちろん、default任せにせずに自前で自由な比較を実装可能です。その場合でも最大6つの比較演算子の自動生成を期待できます。
この様に、宇宙船演算子は複雑な比較を一括で行うだけでなく今まで非常に面倒になっていた比較演算子の実装の手間を大幅に軽減してくれる凄い奴です。
そして、この宇宙船演算子の登場によってstd::rel_opsはその意味をほぼ失い、非推奨となりました・・・。

**自動生成される演算子
宇宙船演算子を用いれば他の6つの比較は宇宙船演算子を用いて書くことが出来るので、そのように実装されるはずです。先ほどのクラスCに対してあえて書いてみると

>|cpp|
class C {
//省略

   //bool operator==(const C& rhs) const { return *this <=> rhs == 0; }
   //bool operator!=(const C& rhs) const { return *this <=> rhs != 0; }
   bool operator< (const C& rhs) const { return *this <=> rhs <  0; }
   bool operator> (const C& rhs) const { return *this <=> rhs >  0; }
   bool operator<=(const C& rhs) const { return *this <=> rhs <= 0; }
   bool operator>=(const C& rhs) const { return *this <=> rhs >= 0; }

   bool operator==(const C& rhs) const = default;  //実装は後述
   bool operator!=(const C& rhs) const { return !(*this == rhs); }
};
||<
この様な形になるでしょう。（ちなみに、宇宙船演算子の優先順位は他のすべての比較演算子よりも高くされています。）
ただし、実際にはこのように実装される訳ではなく、各比較演算子のオーバーロード解決時にその比較演算子の実装に関わらず、宇宙船演算子を用いて（上記のような実装で）書かれた式をオーバーロード候補に入れて解決を行う、という形で各比較演算子を使用することが出来ます。なので、自動実装ではなく自動生成と呼んでいます。

少し詳しく書いておくと
任意の型T1,T2の値a,bに対して、任意の比較演算子@が呼び出された場合
+まず、a@b、a&lt;=&gt;b、b&lt;=&gt;aの3つをオーバーロードの候補として加えておく。
+オーバーロード解決の結果a&lt;=&gt;bが選ばれたら、a@b → a&lt;=&gt;b@0、のように書き換える。
+オーバーロード解決の結果b&lt;=&gt;aが選ばれたら、b@a → 0@b&lt;=&gt;a、のように書き換える。
+そして、そのように書き換えた式が比較演算子@であるかのように実行されます。この書き換えは上の定義と同じである事が分かるでしょう。
なお、書き換えた式内の&lt;=&gt;及び==演算子に対してこの演算子生成は行われません。

ただし、同値比較演算子（operator==,operator!=）は宇宙船演算子を用いて生成されません。operator==は独自に、operator!=はoperator==を利用してそれぞれ実装されます。
しかし、宇宙船演算子を=defaultで宣言しておけばoperator==が自動実装されるので、2つの同値比較演算子も利用可能になります。
上の手順において@が==か!=である場合、&lt;=&gt;の代わりに==を用いた書き換えが行われます。

残念ながら、自分で実装を行う場合はoperator==の実装も書かなければなりません・・・


**対称性
あるクラスに対して宇宙船演算子を定義した場合、同じ型同士の同値比較ならほぼ気になりませんが、異なる型との比較や順序付けを行う場合はその対称性が当然に期待されます。
つまり
>|cpp|
struct A {
   int a;

   auto operator<=>(const double) const;   //実装は省略
   auto operator== (const double) const;   //実装は省略
};


A a = {1};

auto comp1 = a   <=> 2.0;   //こっちが出来るなら、comp1 < 0
auto comp2 = 2.0 <=> a;     //こっちも出来てほしい、comp2 > 0
||<
この様に、A<=>doubleが比較可能ならば、その逆のdouble<=>Aも比較可能であってほしいしそれが自然です。でも、一々両方定義するのって面倒ですよね・・・
ご安心ください、異種比較を行う宇宙船演算子は2対存在していますが、片方が定義されていればもう片方も自動生成されます。

かしこい人はお気づきかもしれませんが、前項のオーバーロード解決に関する説明で次のように書いてありました。
＞任意の型T1,T2の値a,bに対して、任意の比較演算子@が呼び出された場合
＞まず、a@b、a&lt;=&gt;b、b&lt;=&gt;aの3つをオーバーロードの候補として加えておく。
つまり、a@bと書いてもb&lt;=&gt;aが、b@aと書いてもa&lt;=&gt;bがオーバーロード解決の候補に入るため、片方だけ書いておけば良いのです。
ただし、@が&lt;=&gt;の場合、書き換えによって冗長な呼び出しとなる場合は書き換えは行われません。つまり、a&lt;=&gt;bと呼ばれた場合の候補はa&lt;=&gt;bと0&lt;=&gt;(b&lt;=&gt;a)の二つになり、a&lt;=&gt;b → (a&lt;=&gt;b)&lt;=&gt;0のような書き換えは行われません（逆も同様）。

等値比較演算子の場合も同様に、a==b(a!=b)と書いてもb==a(b!=a)がオーバーロードの候補に入れられるのでどちらか片方があればよくなります。

異種比較の演算子の場合、宇宙船演算子（とoperator==）の利用によって最大12個の演算子をたった2つの演算子の定義から生成してもらうことが可能になります。

結局、それぞれの演算子を書いたときに考慮される候補は以下のようになります。
|呼び出す演算子 a@b|オーバーロード候補|
|a &lt;=&gt; b|a &lt;=&gt; b<br> 0 &lt;=&gt; (b &lt;=&gt; a)|
|a == b| a == b<br> (b == a) ? true : false|
|a != b| a != b <br> (a == b) ? false : true <br> (b == a) ? false : true|
|a &lt; b|a &lt; b<br> (a &lt;=&gt; b) &lt; 0<br> 0 &lt; (b &lt;=&gt; a)|
|a &lt;= b|a &lt;= b<br> (a &lt;=&gt; b) &lt;= 0<br> 0 &lt;= (b &lt;=&gt; a)|
|a &gt; b|a &gt; b<br> (a &lt;=&gt; b) &gt; 0<br> 0 &gt; (b &lt;=&gt; a)|
|a &gt;= b|a &gt;= b<br> (a &lt;=&gt; b) &gt;= 0<br> 0 &gt;= (b &lt;=&gt; a)|

この時、生成される候補の式内で使用される&lt;=&gt;及び==演算子は、型T1,T2それぞれのメンバ・非メンバ・組み込み、のものが考慮され、見つかった演算子ごとにオーバーロード候補に入れられます。
すなわち、表内のオーバーロード候補1つに対して複数の候補が見つかることがあり得るため、a@bのオーバーロード候補は3つよりも多くなることがあります。

**default実装
宇宙船演算子が非テンプレートの非staticメンバ関数であり、そのクラスのconst参照を引数にとる宣言のみdefault指定することができ、コンパイラ様に実装して頂くことが可能です。
そのようなdefault実装は基底クラス及びメンバ変数の辞書式比較によって実装され、同時に宣言されるoperator==も同様の実装になります。
辞書式比較とは要するに、ある順番で並んでいる要素をその順番で比較していく方法です。std::tieを使って変数の比較をまとめて行う時も辞書式比較が用いられます。
defaultの&lt;=&gt;(==)は以下のように比較を行います。
+基底クラスの&lt;=&gt;を呼び出し比較する。その順番は左から右（:の後に書いてある順）へ深さ優先で実行。
+次に、宣言された順でメンバ変数の&lt;=&gt;を呼び出し比較を行う。
--その際、配列はその要素に添え字順で&lt;=&gt;を適用する。
+これらの比較の際、比較の結果が0でない時点でその結果を返して終了。

>|cpp|
class D : Base1, Base2 {
   int x;
   int y;
   double v;
   int array[3];
   std::string str;
public:
   //auto operator<=>(const D&) const = default;
   auto operator<=>(const D& that) const {
      if (auto comp = static_cast<const Base1&>(*this) <=> static_cast<const Base1&>(that); comp !=0) return comp; 
      if (auto comp = static_cast<const Base2&>(*this) <=> static_cast<const Base2&>(that); comp !=0) return comp;
      if (auto comp = x <=> that.x; comp !=0) return comp;
      if (auto comp = y <=> that.y; comp !=0) return comp;
      if (auto comp = v <=> that.v; comp !=0) return comp;
      if (auto comp = array[0] <=> that.array[0]; comp !=0) return comp;
      if (auto comp = array[1] <=> that.array[1]; comp !=0) return comp;
      if (auto comp = array[2] <=> that.array[2]; comp !=0) return comp;
      return str <=> that.str;
   }

   //auto operator==(const D&) const = default;
   auto operator==(const D& that) const {
      if (auto comp = static_cast<const Base1&>(*this) == static_cast<const Base1&>(that); comp != true) return false; 
      if (auto comp = static_cast<const Base2&>(*this) == static_cast<const Base2&>(that); comp != true) return false;
      if (auto comp = x == that.x; comp != true) return false;
      if (auto comp = y == that.y; comp != true) return false;
      if (auto comp = v == that.v; comp != true) return false;
      if (auto comp = array[0] == that.array[0]; comp != true) return false;
      if (auto comp = array[1] == that.array[1]; comp != true) return false;
      if (auto comp = array[2] == that.array[2]; comp != true) return false;
      return str == that.str;
   }
};
||<
つまりはこの様な実装になることになります。もし辞書式順序かつ宣言とは違う順番に比較したいときはこのような形で自前実装する必要があります。
基底クラスの比較順が深さ優先とは、基底クラスのdefault実装&lt;=&gt;(==)を呼び出したときに、同じことが基底クラスの&lt;=&gt;(==)でも行われるためです。

なお、仮想基底クラス（virtual継承）がこの場合に複数回比較されるかは未規定です。コンパイラによって変わる可能性がありますが、それによって比較結果が変わる事は無いでしょう。

***戻り値型
default実装される宇宙船演算子の戻り値の型は後述するComparison category types（比較カテゴリ型）と呼ばれる5つの型のいずれかになります。同様に、組み込み/STLの宇宙船演算子もComparison category typesのいずれかの型を返します。
default実装は上記のように、基底クラスとメンバに対して連続的に&lt;=&gt;を適用するので、その戻り値型は全ての&lt;=&gt;の戻り値型の比較カテゴリ型を変換できる最も強い型となります。つまり、ユーザーは予測することは可能ですが面倒です（一応、そのような型を求めるためのstd::common_comparison_category<Ts...>というメタ関数が提供されます）。そのため、戻り値型はautoにしておくことが推奨されます。
なお、ユーザー定義の宇宙船演算子の戻り値型は自由です。一応0との比較が可能な型が望ましいですが制限はありません。<s>つまりは誤用し放題です。</s>

***関係演算子のdefault実装
実は、&lt;=&gt;と==を除く残りの5つの比較演算子についても=default指定をすることができるようになります。
その場合、!=は==を、残りの4つは&lt;=&gt;を用いて実装されます（上で示したように）。

そのような&lt;=&gt;が見つからない（定義なし、deleteされている、比較カテゴリが合わない等の）場合、そのdefault比較演算子はdeleteされます。

これは、比較演算子のアドレスを取る必要がある場合に利用することを想定しているようです。

>|cpp|
struct C {
   //比較カテゴリがstrong_equality
   friend std::strong_equality operator<=>(const C&, const C&);

   //宣言はOKだが、関数はdeleteされる
   bool operator<(const C&) = default;
};
||<

**Comparison category types（比較カテゴリ型）
半順序、弱順序、全順序について予め理解しておくとこの節及び各型の意味の理解が深まるかもしれません。
[https://onihusube.hatenablog.com/entry/2018/09/18/022130:title]

前述のようにdefault実装/組み込み型/STLの一部の型、の宇宙船演算子は5つの比較カテゴリ型のいずれかを返します。これらの型はその比較（&lt;=&gt;）が満たしている順序や同値関係に関する性質を表しています。
新しく追加される&lt;compare&gt;ヘッダにおいて以下の5つが定義されます。

|比較カテゴリ型|対応する2項関係|生成される演算子|
|std::weak_equality|同値関係（相当関係も含む全ての同値関係）|* == !=|
|std::strong_equality|相当関係（最も細かい（強い）同値関係）|* == != |
|std::partial_ordering|半順序|* == != &lt; &lt;= &gt; &gt;= |
|std::weak_ordering|弱順序|* == != &lt; &lt;= &gt; &gt;= |
|std::strong_ordering|全順序|* == != &lt; &lt;= &gt; &gt;= |

大きく分けると同値関係と順序の2種類があります。どちらも、partial→weak→strongの順で強く（制約がきつく）なり、逆方向への変換が可能です（暗黙変換が定義される）。
また、orderingはequalityを包含しておりこれも変換が可能（暗黙変換が定義される）ですが、strong_equalityはstrong_orderingからしか変換できずweak_equalityはpartial_orderingとweak_orderingの両方から変換可能です。
また、weak_equalityはweak_orderingのequalityな部分（==,!=）ではありません。weak_orderingはweak_equalityを包含していますが、weak_equalityであっても順序律を満たさずweak_orderingとなれないことがあるためです。

比較カテゴリ型の関係（矢印の方向に変換可能）: p0515r3より[https://raw.githubusercontent.com/onihusube/blog/master/2019/20190113_spaceship_operator/comparison_categories.png:image=https://raw.githubusercontent.com/onihusube/blog/master/2019/20190113_spaceship_operator/comparison_categories.png]

この暗黙の変換関係はそれ自体が一つの順序を示していて、strong_equalityとpartial/weak_orderingの間に順序付けが出来ない（比較不能）ことから、この順序は半順序関係を成しています。

equalityな型は==と!=、orderingな型は6つの比較演算子を用いて比較を行うことができます。その際、比較に使えるのは0リテラルのみで、0以外との比較は未定義動作とされています。例えば、nullptr_tを引数型として実装されます。

宇宙船演算子の返り値は+0-を表現できればいいので任意の符号付整数型でも十分ですが、わざわざこのような複雑な型を返すように定義されているのは、比較というものの分類についてC++型システムの恩恵を受けるためです。
単純な=という関係にさえ同値と等価の二つの種類があり、順序にも半・弱・全順序の3つの種類があります。中には=を=とみなせない、意味のある順序が付かないものがあり、実装する処理によってはこれを考慮しなければなりません（STL内ソートに関わる「狭義の弱順序」等）。
この時、その比較が満たしている要件を型で表現しておくことで、テンプレート等の機構によりコンパイル時の検出・切替を行うことができます。そのため、単純な符号付整数を返すのではなく比較のカテゴリを表明する型を返すようになっているのです。

***equalityとordering
default実装された宇宙船演算子が返す比較カテゴリ型によっては自動生成・実装される演算子が2つになることがありえます（そのため上では最大6つの、という書き方をしていました）。
-decltype(a&lt;=&gtb)がweak_equality/strong_equalityならば、自動生成される比較演算子はなく、==と!=の2つの演算子のみが自動実装される。
-decltype(a&lt;=&gtb)がpartial_ordering/weak_ordering/strong_orderingならば、4つの比較演算子が自動生成され、==と!=も自動実装される。
自前で実装する場合でも、実装したい比較の種類によってこの違いを認識しておく必要があるかもしれません。

equalityな型は同値比較のみについての性質を、orderingなカテゴリ型は同値比較も含めた順序付けの性質についてを表明しています。

***weakとstrong
strongでない（partialやweakな）比較カテゴリ型による同値比較（operator==）では、trueとなった結果であっても区別できることがあります。

例えばアルファベットのみの文字列の比較を考えてみると
+長さの比較
+先頭からの辞書式比較
という手順が考えられますが、2番目の比較時に大文字小文字をどうするかどうかが問題です。

文字ごとの比較で大文字小文字を区別しない場合、そのoperator==がtrueを返したとしても目で見ればその文字列が異なっている場合があります（その二つの文字列は同値）。
この場合の比較カテゴリ型はweak_equalityになります（とすべきです）。

文字ごとの比較で大文字小文字を区別する場合、そのoperator==がtrueを返した文字列同士は目で見ても区別できないはずです（その二つの文字列は等価）。
この場合の比較カテゴリ型がstrong_equalityになります。

また、そこに順序（<）を加えることを考えてみると
アルファベットの順に大きくなっていくという風に決めたとしても

大文字と小文字を区別しない場合、a == Aという同値関係から同じ文字の大文字小文字同士の比較（例えばa < AとA < a）はともにfalseとなります。すなわち比較不能です。
この時、比較不能である＝同値である、とすることによって上で決めた（大文字小文字を区別しない）同値関係を満たしつつ順序を導入することができます。
この様に、比較不能な要素を同値として扱い、そのような要素は他の要素との相対的な順序によって順序を付ける（並べる）とき、そのような比較（<）を弱順序であると言います。
そして、この場合の比較カテゴリ型はweak_orderingになります（とすべきです）。

大文字と小文字を区別する場合、例えば常に大文字 < 小文字かつZ &lt; aと決めれば、全ての要素同士が比較可能になります。
この様に、比較不能な要素が無く全ての要素に順序を付けられるとき、そのような比較（<）を全順序であると言います。
そして、この場合の比較カテゴリ型がstrong_orderingになります。

<!--

***partialとweak

-->

***substitutability（代入可能性、代入原理）
代入可能性とは、ある比較カテゴリにおいて[tex:a=b \to f(a)=f(b)]となる性質の事です（この場合のfはpure function、数学的な関数と思ってください）。これを満たすのはstrong_orderingとstrong_equalityの二つだけです。（数学的にはむしろ、この代入原理を満たしている=がtrueとなるときにのみ等価であるとします）
半順序（partial_ordering）はその順序付けにおいて比較不可能な値の存在を認めます。弱順序（weak_ordering）は比較不可能な値を同値（=）として扱う事で比較不可能な値を認めません。同値関係（weak_equality）は同値とみなせる値同士の関係がtrueとなりえます。つまり、これらの比較においてa == bは必ずしも等価であることを表しません。そのため、a == b がtrueだとしてもある関数を通した結果のf(a) == f(b)はtrueとは限りません。
宇宙船演算子をユーザー定義してstrong_ordering（かstrong_equality）を返す場合はこの性質を満たしているべきです。特に、データメンバや基底クラスの一部が比較に関与しない実装になっているとこの性質を満たさない可能性があるので、すべてを比較に参加させる必要があります。

***狭義の弱順序との関係
C++標準のソートに関わるところで要求されているのはoperator&lt;()が狭義の弱順序を満たすことです。そして、これを満たすような比較カテゴリ型はweak_orderingとstrong_orderingのみです。
＊_equalityとなる比較カテゴリ型は当然として、partial_orderingは順序付け比較を提供しますがそれを用いてソートをしても意味のある順序をつけることはできません。
ソートに使用するような比較演算子を提供したい場合、定義する宇宙船演算子の返すカテゴリ型がweak_orderingかstrong_orderingのどちらかに（もしくはそれを満たすように）なるように注意しなければなりません。


***共通比較カテゴリ型（Common comparison category type）
宇宙船演算子の戻り値型をautoにする場合、その型は比較に参加するすべての型の宇宙船演算子による比較の結果となる比較カテゴリ型から共通して変換できる最も強い型、になります。
そのような型を共通比較カテゴリ型と言い、共通比較カテゴリ型は以下のように決定されます。

共通比較カテゴリ型をUとして、比較に参加するすべての型の宇宙船演算子による比較カテゴリ型をそれぞれ`Ti (0 <= i < N)`とすると

+ Tiの中に一つでも比較カテゴリ型でない型がある場合、U = void
+ Tiの中に1つでもweak_equalityかstrong_equalityがあり、それ以外のTiの中に1つでもpartial_orderingかweak_orderingがある場合、U = weak_equality
+ Tiの中に1つでもstrong_equalityがある場合、U = strong_equality
+ Tiの中に1つでもpartial_orderingがある場合、U = partial_ordering
+ Tiの中に1つでもweak_orderingがある場合、U = weak_ordering
+ それ以外の場合、U = strong_ordering

これを一々考えるのは面倒なのでautoとしておくか、これを求めるために提供されるstd::common_comparison_categoryというメタ関数を使用するといいでしょう。

>|cpp|
//<compare>ヘッダにて定義

namespace std {
   template <class ...Ts>
   struct common_comparison_category {
      using type = /* 略 */ ; 
   };

   template <class ...Ts>
   using common_comparison_category_t = typename common_comparison_category<Ts...>::type;
}
||<

このメタ関数は以下のような型を返します。
-Tsが空ならstrong_ordering
-各Tsが&lt;=&gt;をサポートする場合、各&lt;=&gt;の返す型を変換可能な最も強い比較カテゴリ型
-それ以外の場合はvoid

<!-- 
***std::common_comparison_category
これは、いくつかの型の宇宙船演算子の戻り値型に共通して変換可能な最も強い比較カテゴリ型を判定するために提供されるメタ関数です。例えば、default実装の宇宙船演算子が返す型を求めるのに使えます。
>|cpp|
template <class ...Ts>
struct common_comparison_category {
   using type = /* 略 */ ; 
}; 

template <class ...Ts>
using common_comparison_category_t = typename common_comparison_category<Ts>::type; 
||<

このメタ関数は以下のような型を返します。
-Tsが空ならstrong_ordering
-各Tsが&lt;=&gt;をサポートする場合、各&lt;=&gt;の返す型を変換可能な最も強い比較カテゴリ型
-それ以外の場合はvoid
-->

**比較カテゴリ型と==,<を利用した宇宙船演算子のdefault実装
上で説明した宇宙船演算子のデフォルト実装は素晴らしいものですが、少し足りていないところがあります。それは、C++17以前に作成され、宇宙船演算子を持たない型に対してはデフォルト実装を提供できないことです。
そのような型をメンバに含んでいるクラスは宇宙船演算子のデフォルト実装の恩恵を受けることができません。

>|cpp|
//C++17以前から使用されてきた秘伝の型、従来の比較演算子は実装されているが・・・
struct old_type {
   int n = 10;

   //共に実装は省略
   bool operator==(const old_type&) const noexcept;
   bool operator< (const old_type&) const noexcept;
};

//C++20環境で定義された新しい型
struct new_type {
   int m = 10;
   old_type old = {20};

   //old_typeは<=>を持たないため、実装不可、暗黙delete
   auto operator<=>(const new_type&) const = default;

   //==があるため実装可能（明示的な宣言は実は不要）
   bool operator== (const new_type&) const = default;
};
||<

このような型に対して変更を加えることができればいいのですが、ライブラリの中にあったりして自分で手を出せない事もあるでしょう・・・
宇宙船演算子を手で実装すれば実装はできますが、やはりdefault実装に任せたいものです。

このような時、宇宙船演算子の戻り値型を明示的に書くことでdefault実装で済ます事ができます。

>|cpp|
struct new_type {
   int m = 10;
   old_type old = {20};

   //指定した戻り値型とold_typeの持つ比較演算子を用いて実装してもらう
   std::strong_ordering operator<=>(const new_type&) const = default;
};

new_type n1{}, n2 = {20, {30}};
auto comp = n1 <=> n2;  //ok!
||<

戻り値型を明示的に指定する事で比較の実装をどのように行えば良いのかが明確になり、< ==を使って<=>と同等の比較を構成できるようになります。
このようなdefault実装は以下のような実装になります。

>|cpp|
struct new_type {
   int m = 10;
   old_type old = {20};

   //std::strong_ordering operator<=>(const new_type&) const = default;
   std::strong_ordering operator<=>(const new_type&) const = default {
      if (auto comp = static_cast<std::strong_ordering>(m <=> that.m); comp !=0) return comp;

      //<=>の合成
      if (old == that.old) return std::strong_ordering::equal;
      if (old <  that.old) return std::strong_ordering::less;
      return std::strong_ordering::greator;
   }
};
||<

このように、上で説明した通常の<=>デフォルト実装に加えて必要ならこのような実装を行います。
これによって、<=>を持たないレガシーな型をメンバに持つ際にも<=>のデフォルト実装を提供できるようになります。

*** 宇宙船演算子の合成の詳細

ある型Tの値a,bと比較カテゴリ型Rを用いて、<=>は次のように合成されます。

まずa &lt;=&gt; bのオーバーロード解決を行い、使用可能な&lt;=&gt;が見つかった場合は、static_cast<R>(a &lt;=&gt; b)で定義。
見つかったが、使用できない場合（アクセスできない、削除されている等）は定義されない。

いかなる形の&lt;=&gt;も見つからない時
Rがstd::strong_orderingならば、
Rがstd::weak_orderingならば、
Rがstd::partial_orderingならば、
Rがstd::strong_equality
Rがstd::weak_equality
上記のケースに当てはまらない場合、定義されない

この様に合成された&lt;=&gt;を用いて、上で説明したようなdefault実装を行います。戻り値型がautoの時はこの合成は行われません。

合成された結果となる<=>が定義されない場合はdefault<=>は暗黙的にdeleteされます。
ill-formedとなる場合も同様にdeleteされていますが、コンパイルエラーを引きおこします。
ill-formedとなる場合とは、戻り値型をRに変換できない場合や==,<の戻り値型がbool出ない場合なとです。

*** なぜ戻り値型を指定する必要が・・・？



**組み込み型の宇宙船演算子
ここまで当たり前のように前提にしていましたが、C++20からはvoid以外の基本型（Fundamental types）にはもれなく宇宙船演算子が導入されます。そして、その比較カテゴリは以下のようになります。
-bool型 → std::strong_ordering
--boolはboolのみと比較可能
-charやint等の整数型 → std::strong_ordering
--同じ列挙型同士、スコープ無し列挙型と整数型間の比較を含む
-float、double等の浮動小数点型 → std::partial_ordering
-関数/メンバポインタ、nullptr → std::strong_equality
-オブジェクトポインタ → std::strong_ordering

浮動小数点型がstd::partial_orderingなのは、あらゆる値との比較が不可能なNaNを持っているためです（弱順序の要件にすら満たない）。また、関数やメンバポインタの順序には意味が無いため、等価比較のみが可能なstd::strong_equalityとなっています。

以下、少し詳しめの解説。
ここでは、比較=宇宙船演算子による比較という意味で使います。また、型変換に関しては複雑であるので説明しません、なんとなく同じ型になるんだなあと思ってください（[https://ezoeryou.github.io/cpp-book/C++11-Syntax-and-Feature.xhtml#conv:title=標準型変換（Standard conversions）]等を参照してください）。

任意の基本型T1, T2の値a, bに対してa &lt;=&gt; bが呼ばれた場合

a, bの型（T1, T2）が共に算術型（ただし、片方がboolならもう片方もboolでなければならない）もしくはスコープ無しenumと整数型のペアである場合は、その値に[http://eel.is/c++draft/expr.arith.conv:title=usual arithmetic conversions]が適用された後
整数型→浮動小数点型、以外の[https://ezoeryou.github.io/cpp-book/C++11-Syntax-and-Feature.xhtml#dcl.init.list:title=縮小変換]が適用される場合はコンパイルエラー（例えば、signed → unsigned）。
共に整数型となる場合は比較が可能で、カテゴリはstd::strong_ordering。
共に浮動小数点型となる場合も比較可能で、カテゴリはstd::partial_ordering。

a, bが共に同じ列挙型の値である場合、その基底となる整数型に変換したうえで&lt;=&gt;を適用する（スコープの有無によらず、異なる列挙型間の比較はコンパイルエラー）。

a, bの片方もしくは両方が何らかのポインタである場合、両方をなるべく同じポインタ型（[http://eel.is/c++draft/expr.type#def:composite_pointer_type:title=composite pointer type]）に変換し（配列→ポインタ、派生→基底、関数ポインタ変換、CV修飾変換等による）
結果のポインタ型が関数ポインタ、メンバポインタ、std::nullptr_t である場合は比較可能で、カテゴリはstd::strong_equality。
結果のポインタ型がオブジェクトポインタである場合も比較可能で、カテゴリはstd::strong_ordering。
ただし、どちらのケースも変換されたポインタ同士の比較が規定されていない場合はその比較結果は未規定（[https://ezoeryou.github.io/cpp-book/C++11-Syntax-and-Feature.xhtml#intro.defs.undefined:title=未規定の動作（unspecified behavior）]）。

a, bが共に配列である場合はコンパイルエラー。
以上に当てはまらないような比較についてもコンパイルエラー。

<!-- 
**従来の比較演算子との差異
***符号の異なる整数型の比較
 -1&lt;=&gt;1u のような、符号の異なる整数型同士の宇宙船演算子による比較はコンパイルエラーとなります。
しかし、従来の比較演算子（-1 &lt; 1u == false）では可能でした。C++20からは非推奨化されます。

***列挙型と浮動小数点型の比較
***異なる列挙型間の比較
***配列同士の比較
-boolはboolとのみ比較が可能、もし他の型と比較した場合はコンパイルエラー。
-スコープ付きの列挙型（enum class）は同じ型同士のみ比較可能、異なる型間の比較はコンパイルエラー。

-配列同士の比較はコンパイルエラー
-->

**operator==について
当初の提案では、宇宙船演算子を用いて6つの比較演算子全てを生成するはずでした。しかし、同値比較についてショートサーキットの問題が発覚したために、そこから同値比較演算子が切り離されることになりました。

ショートサーキットの問題とは、std::vectorやstd::string等のクラスの同値比較をする場合に比較をする順番によってパフォーマンスが大きく変化してしまう可能性があることです。

std::vectorで宇宙船演算子を実装して比較を提供することを考えてみましょう（ここから下のコードはoperator==のデフォルト実装導入前の世界のコードです）
>|cpp|

template<typename T>
strong_ordering operator<=>(const std::vector<T>& lhs, const std::vector<T>& rhs) {
   //本来はこう書けばいい
   //return std::lexicographical_compare_3way(lhs.begin(), lhs.end(), rhs.begin(), rhs.end());

   //問題を見るために直接実装
   size_t min_size = std::min(lhs.size(), rhs.size());
   for (size_t i = 0; i != min_size; ++i) {
      if (auto const cmp = std::compare_3way(lhs[i], rhs[i]); cmp != 0) {
         return cmp;
      }
   }
   return lhs.size() <=> rhs.size();
}
||<

std::lexicographical_compare_3wayは二つの範囲の辞書式三方比較を行ってくれる関数で、std::compare_3wayはTに&lt;=&gt;があればそれを利用し、無ければ<と==を使って比較を行う関数です。
ともにC++20からalgorithmヘッダに追加されます。
この比較方法は同値比較でない4つの比較に対してはなにも問題ありません。

しかし、こと同値比較の場合はサイズを先に比較すればショートサーキットできる可能性があります。
つまり、サイズが一致していなければそもそも同値になりえないのです。
実装してみれば
>|cpp|
template<typename T>
bool operator==(const std::vector<T>& lhs, const std::vector<T>& rhs)
{
   //サイズを先にチェックすることで比較をショートサーキット
   const size_t size = lhs.size();
   if (size != rhs.size()) {
      return false;
   }

   for (size_t i = 0; i != size; ++i) {
      //ネストする比較においても<=>ではなく==を使う（ようにしたい）
      if (lhs[i] != rhs[i]) {
         return false;
      }
   }

   return true;
}
||<

この様にすれば、そもそもサイズが一致しない場合に時間のかかりうる要素同士の比較をスキップして比較を終了させることができます。
C++17までの実装もこうなっており、ゼロオーバーヘッド原則的にもこれが理想です。
非同値比較（大小比較）の場合もサイズを先に比較しないの？と疑問がわきますが、C++17までの実装でもそうしていないのでそこは問題ない様子です（辞書式順序的に大小比較の場合はそれでいい様子）。

これだけであれば、そのクラス内だけはこのように実装しておけば別に構わないでしょう。しかし問題なのは、他のクラスのメンバとして比較されるときです。

>|cpp|
struct S {
   std::vector<string> names;
   auto operator<=>(const S&) const = default;
};
||<

このクラスSは6つの比較演算子が宇宙船演算子から生成され、比較が可能です。
当初はoperator==も&lt;=&gt;を使って生成されていました。つまり、S::namesの比較においても&lt;=&gt;が使われます。
vectorには先ほどのように実装された効率的なoperator==があるにもかかわらず、このままでは使われません。

当初の提案の下で、このクラスSで効率的なoperator==を実装するには以下のようにする必要があります。
>|cpp|
struct S {
   std::vector<string> names;

   auto operator<=>(const S&) const = default;

   bool operator==(const S& that) const {
      return names == that.names;
   }
   
   bool operator!=(const S& that) const {
      return names != that.names;
   }
};
||<
そう、書くのです、手で。

この様な利用をする他のクラス、このSをメンバにするクラス、すべてでこの様に書くんです。
しかも、組み込み型でない型の場合はその比較演算子の実装を見に行ってこの様に書くかを判断する必要があります・・・・

この様な問題があり、Rust等の他の言語では同値比較とそれ以外を区別したうえで各種比較関数を生成するようになっている事から、宇宙船演算子は同値比較演算子を生成しないように変更されました。
そして、operator==のdefault実装とoperator!=を==から導出する、という仕様が追加されました。

operator==のdefault実装は最初の方で説明したように、基底・メンバのoperator==を呼び出します。
なので、上記のSにおいてもoperator==のdefault宣言を追加しておけば、効率的な==を利用したうえで6つの比較演算子による比較が可能になります。

しかし、簡便さのためにもdefaultの宇宙船演算子がある場合はdefaultのoperator==も暗黙に宣言・定義されるようにされました。
そのため、当初の宇宙船演算子の持っていた1つから全演算子の自動生成という特性が失われたわけではありません。

**任意のクラス型の非型テンプレートパラメータとしての使用

この項目は、前項の変更の余波により宇宙船演算子との関連が薄くなったのでページを移しました。
[https://onihusube.hatenablog.com/entry/2019/03/23/141537:embed:cite]

<!--
任意のクラス型（共用体を含まない）がmutable・volatileなメンバを持たず、strong structural equality（後述）であり、default実装の宇宙船演算子がpublicアクセス可能であり、constexprに構築可能であるとき、そのクラスは非型テンプレートパラメータとして利用することができるようになります。
提案（P0732R2）では、コンパイル時文字列を非型テンプレートパラメータとして利用可能になることを利点としてあげています。その他にも、std::pairやstd::tupleが非型テンプレートパラメータとして利用可能になる可能性があります。
そのように非型テンプレートパラメータとして渡されたオブジェクトはconstなglvalueオブジェクトとなり、異なる非型テンプレートパラメータ毎に唯一つのインスタンスがプログラム内に存在します。当然、メンバ関数呼び出しやアドレス取得が可能です。

こんなことができる・・・かもしれません。
>|cpp|
//何か値のペアを受け取り出力する
template<auto Pair>
void f() {
   std::cout << std::get<0>(Pair) << ", " << std::get<1>(Pair) << std::endl;
}

f<std::pair<int, int>{10, 20}>();
f<std::tuple<int, int>{10, 20}>();

//固定文字列型
template<typename CharT, std::size_t N>
struct fixed_string {
   constexpr fixed_string(const CharT (&array)[N + 1]) {
      std::copy_n(array, N + 1, str);
   }

   auto operator<=>(const fixed_string&) = default;

   CharT str[N + 1];
};

template<typename CharT, std::size_t N>
fixed_string(const CharT (&array)[N]) -> fixed_string<CharT, N-1>;

//fixed_stringを出力
template<fixed_string Str>
void g() {
   std::cout << Str.str<< std::endl;
}

g<"Hello World!">();
g<"<=> Awesome!">();
||<

***strong structural equality（強い構造的等価性）
ある型Tがstrong structural equalityである（を持つ）とは、Tに定義された宇宙船演算子が=default指定されており、その戻り値型がstd::strong_equalityに変換可能であり、Tのすべての基底型及び非静的メンバ型がstrong structural equalityであることです。
ちなみに、浮動小数型以外の基本型はstrong structural equalityです。
浮動小数点型をメンバに持たずに宇宙船演算子をdefault実装していれば、おおよそのケースでこれを満たすことができると思います。

***なぜdefaultの宇宙船演算子とstd::strong_equalityなのか？
それは、二つのインスタンス化されたテンプレートがあるとき、その等価性を判断するためです。
通常テンプレートはinline指定されたように振る舞い（複数の翻訳単位にわたって実体がただ一つとなる、ODRのため）、それはコンパイラによる名前マングルとリンカによる重複削除によって実現されます。何も考えずにクラス型を非型テンプレートパラメータとして許可すると、名前マングルだけではテンプレートの同一性を判定できなくなります。
全基底及びメンバ単位で等価であることが保証できればその問題は解決されますが、ユーザー定義されたoperator==(or !=)においてそれが確実に保証されるかどうかを判定するのは困難です。また、比較演算子のdefault実装もC++17以前にはありません。
しかしこの度宇宙船演算子が導入され、そのdefault実装は全基底及びメンバの辞書式比較で実行されます。そして、その結果がstd::strong_equalityであれば等価性を保証できます（weak_equalityでは同値であることしか保証できません）。
このように見れば、ユーザー定義の宇宙船演算子ではこれを保証することが不可能（もしくはコンパイラの多大な努力が必要）であり、結果としてstd::strong_equalityを要求する必然性も理解できるかと思います。
-->

**参考文献
[http://wg21.link/p0515:title=P0515R3 "Consistent comparison"]
[http://wg21.link/p0768:title=P0768R1 "Library support for the spaceship (comparison) operator"]
[http://wg21.link/p0732:title=P0732R2 "Class Types in Non-Type Template Parameters"]
[http://wg21.link/p1120:title=P1120R0 "Consistency improvements for <=> and other comparison operators"]
[http://wg21.link/p1185:title=p1185R2 "<=> != =="]
[http://wg21.link/p1186:title=p1185R2 "When do you actually use <=>?"]
[http://wg21.link/p1630:title=p1185R2 "Spaceship needs a tune-up"]
[http://eel.is/c++draft/expr.spaceship:title]
[https://en.cppreference.com/w/cpp/language/operator_comparison#Three-way_comparison:title]
[https://ja.cppreference.com/w/cpp/language/default_comparisons:title]
[https://ja.wikipedia.org/wiki/%E8%BE%9E%E6%9B%B8%E5%BC%8F%E9%A0%86%E5%BA%8F:title]

[https://github.com/onihusube/blog/blob/master/2019/20190113_spaceship_operator.txt:title=この記事のはてな記法ソース（更新差分確認用）]